name: Terraform Apply

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Environment
        options: 
        - uat
        - staging
        - dev
env:
  HW_ACCESS_KEY: ${{ secrets.HW_ACCESS_KEY }}
  HW_SECRET_KEY: ${{ secrets.HW_SECRET_KEY }}
  PASSWORD: ${{ secrets.ECS_ROOT_PWD }}
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.HW_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.HW_SECRET_KEY }}
  ENVIRONMENT: ${{ github.event.inputs.environment }}

jobs:
  terraform:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
        
    - name: 'Setup NodeJS'
      uses: actions/setup-node@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      
    - name: Kubectl tool installer
      uses: Azure/setup-kubectl@v4.0.0
      with:
        version: latest

    - name: Plan Terraform
      working-directory: ${{ github.workspace }}/terraform
      id: plan
      run: |
        terraform init
        terraform workspace select -or-create ${{ env.ENVIRONMENT }} 
        TF_VAR_environment=${{ env.ENVIRONMENT}} TF_VAR_secret_key=${{ env.HW_SECRET_KEY }} TF_VAR_access_key=${{ env.HW_ACCESS_KEY }} TF_VAR_password=${{ env.PASSWORD }} TF_VAR_project_ID=${{ env.PROJECT_ID }} terraform plan

    - name: Apply Terraform
      working-directory: ${{ github.workspace }}/terraform
      run: | 
        TF_VAR_environment=$ENVIRONMENT TF_VAR_secret_key=$HW_SECRET_KEY TF_VAR_access_key=$HW_ACCESS_KEY TF_VAR_password=$PASSWORD TF_VAR_project_ID=$PROJECT_ID terraform apply --auto-approve

    - name: Get Kubeconfig
      run: |
        KUBE_CONFIG=$(terraform output -raw kube-config)
        echo "Kube config: $KUBE_CONFIG"
        if [ -z "$KUBE_CONFIG" ]; then
          echo "Failed to retrieve kube config from Terraform output."
          exit 1
        fi
        export KUBECONFIG="$KUBE_CONFIG"
        # Verify kubectl is configured correctly
        if kubectl config get-contexts &> /dev/null; then
          echo "Kube config is set correctly. Now fetching pods..."
        else
          echo "Failed to set kube config for kubectl."
          exit 1
        fi

        kubectl get pods --all-namespaces

